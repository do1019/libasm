; size_t	ft_strlen(const char *s);
section .text ; レジスタ操作やスタックメモリ操作といったプログラムの中心的な処理を書く場所
	global ft_strlen ; プログラムのどこから読めば良いのかを決める宣言 Cでいうプロトタイプ宣言
ft_strlen:	; ラベルを設置　ここから処理の記述を開始 Intel構文では基本右側から左側に対して操作が行われる
			; アセンブリ言語の一つ一つの命令をニーモニックまたはアセンブラコードと言う。
			; ニーモニックの先頭の命令を表す単語をオペコード（オペレーションコード）、オペコードがとる引数のことをオペランドと言う。
			; 下記で言うと　lea がオペコード、raxが第1オペランド、[rdi - 1]が第2オペランド
	mov rax, rdi		; rax に rdi のアドレスをコピー
						; rdi はft_strlenの第一引数 = 文字列
						; rax は 戻り値を入れるレジスタ
.loop:		; loop ラベルを設定
	cmp byte [rax], 0	; cmpで両オペランド(raxの値と0)を比較、byteでsizeを指定する。== か != かでフラグレジスタがセットされる。
	jnz	.inc_rax		; [rax] != \0 の時 inc_rax ラベルの先頭へ移動。1行前でセットされたフラグレジスタを見ている。
	jmp .end			; 無条件で([rax] == \0 の時)、endラベルに飛ぶ。

.inc_rax:	; inc ラベルを設定
	inc rax				; rax のアドレスを一つ進める。
	jmp	.loop			; loop_label に無条件で飛ぶ

.end:		; end ラベルを設定
	sub	rax, rdi		; rax のレジスタ値から、rdi に指定したレジスタ値を減産し、結果を rax レジスタに格納する。
						; rax - rdi で長さを出す。(この場合raxはヌル文字、rdiは先頭)
	ret					; rax の値が返り値となる。関数呼び出し元のアドレスに戻る。
; section .data	; プログラムのデータ領域、グローバル変数を決めるための場所
				; このセクションでは、さまざまな定数値、ファイル名、またはバッファサイズなどを宣言できる。
; section .bss	; 初期値を持たない変数を格納するためのセクション。C言語では、「初期値が指定されない大域変数」「初期値が0の大域変数」「初期値が指定されない静的局所変数」「初期値が0の静的局所変数」が格納される。
				; C言語の規約では、「この領域はすべて0で初期化されなければならない」と規定されているため、プログラムローダは書き込み可能なメモリを確保した後、すべて0で初期化する。
